// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: geofence.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GeoFenceLabelingServerClient is the client API for GeoFenceLabelingServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoFenceLabelingServerClient interface {
	// Add polygons to the geo-fence for tracking.
	AddPolygonsForGeoFencing(ctx context.Context, in *AddPolygonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// A server-side streaming RPC for sending fenced locations.
	StreamFencedLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoFenceLabelingServer_StreamFencedLocationsClient, error)
}

type geoFenceLabelingServerClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoFenceLabelingServerClient(cc grpc.ClientConnInterface) GeoFenceLabelingServerClient {
	return &geoFenceLabelingServerClient{cc}
}

func (c *geoFenceLabelingServerClient) AddPolygonsForGeoFencing(ctx context.Context, in *AddPolygonsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/geofence.GeoFenceLabelingServer/AddPolygonsForGeoFencing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoFenceLabelingServerClient) StreamFencedLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GeoFenceLabelingServer_StreamFencedLocationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &GeoFenceLabelingServer_ServiceDesc.Streams[0], "/geofence.GeoFenceLabelingServer/StreamFencedLocations", opts...)
	if err != nil {
		return nil, err
	}
	x := &geoFenceLabelingServerStreamFencedLocationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GeoFenceLabelingServer_StreamFencedLocationsClient interface {
	Recv() (*FencedLocation, error)
	grpc.ClientStream
}

type geoFenceLabelingServerStreamFencedLocationsClient struct {
	grpc.ClientStream
}

func (x *geoFenceLabelingServerStreamFencedLocationsClient) Recv() (*FencedLocation, error) {
	m := new(FencedLocation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GeoFenceLabelingServerServer is the server API for GeoFenceLabelingServer service.
// All implementations must embed UnimplementedGeoFenceLabelingServerServer
// for forward compatibility
type GeoFenceLabelingServerServer interface {
	// Add polygons to the geo-fence for tracking.
	AddPolygonsForGeoFencing(context.Context, *AddPolygonsRequest) (*emptypb.Empty, error)
	// A server-side streaming RPC for sending fenced locations.
	StreamFencedLocations(*emptypb.Empty, GeoFenceLabelingServer_StreamFencedLocationsServer) error
	mustEmbedUnimplementedGeoFenceLabelingServerServer()
}

// UnimplementedGeoFenceLabelingServerServer must be embedded to have forward compatible implementations.
type UnimplementedGeoFenceLabelingServerServer struct {
}

func (UnimplementedGeoFenceLabelingServerServer) AddPolygonsForGeoFencing(context.Context, *AddPolygonsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPolygonsForGeoFencing not implemented")
}
func (UnimplementedGeoFenceLabelingServerServer) StreamFencedLocations(*emptypb.Empty, GeoFenceLabelingServer_StreamFencedLocationsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFencedLocations not implemented")
}
func (UnimplementedGeoFenceLabelingServerServer) mustEmbedUnimplementedGeoFenceLabelingServerServer() {
}

// UnsafeGeoFenceLabelingServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoFenceLabelingServerServer will
// result in compilation errors.
type UnsafeGeoFenceLabelingServerServer interface {
	mustEmbedUnimplementedGeoFenceLabelingServerServer()
}

func RegisterGeoFenceLabelingServerServer(s grpc.ServiceRegistrar, srv GeoFenceLabelingServerServer) {
	s.RegisterService(&GeoFenceLabelingServer_ServiceDesc, srv)
}

func _GeoFenceLabelingServer_AddPolygonsForGeoFencing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPolygonsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoFenceLabelingServerServer).AddPolygonsForGeoFencing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/geofence.GeoFenceLabelingServer/AddPolygonsForGeoFencing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoFenceLabelingServerServer).AddPolygonsForGeoFencing(ctx, req.(*AddPolygonsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeoFenceLabelingServer_StreamFencedLocations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GeoFenceLabelingServerServer).StreamFencedLocations(m, &geoFenceLabelingServerStreamFencedLocationsServer{stream})
}

type GeoFenceLabelingServer_StreamFencedLocationsServer interface {
	Send(*FencedLocation) error
	grpc.ServerStream
}

type geoFenceLabelingServerStreamFencedLocationsServer struct {
	grpc.ServerStream
}

func (x *geoFenceLabelingServerStreamFencedLocationsServer) Send(m *FencedLocation) error {
	return x.ServerStream.SendMsg(m)
}

// GeoFenceLabelingServer_ServiceDesc is the grpc.ServiceDesc for GeoFenceLabelingServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeoFenceLabelingServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geofence.GeoFenceLabelingServer",
	HandlerType: (*GeoFenceLabelingServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPolygonsForGeoFencing",
			Handler:    _GeoFenceLabelingServer_AddPolygonsForGeoFencing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFencedLocations",
			Handler:       _GeoFenceLabelingServer_StreamFencedLocations_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "geofence.proto",
}
